rowwise() %>%
mutate(loglike = likelihood_fun(slope, intercept, sd)) %>%
ungroup()
head(grid_samp2)
#grid sampling second attempt
grid_samp2 <- crossing(intercept = seq(-0.30, 0, 0.01),
slope = seq(0.1,0.6,0.01),
sd = seq(1,2, 0.01)) %>%
rowwise() %>%
mutate(loglike = likelihood_fun(slope, intercept, sd)) %>%
ungroup()
head(grid_samp2)
#the ML estimates are
grid_samp2 %>% filter(loglike == max(loglike))
#eyeball parameters
summary(quail_glm)
#the ML estimates are
grid_samp2 %>% filter(loglike == max(loglike))
quail_int_profile <- grid_samp2 %>%
group_by(intercept) %>%
filter(loglike == max(loglike)) %>%
ungroup()
qplot(intercept, loglike, data=quail_int_profile, geom = "line")
quail_sd_profile <- grid_samp2 %>%
group_by(sd) %>%
filter(loglike == max(loglike)) %>%
ungroup()
qplot(sd, loglike, data=quail_sd_profile, geom = "line")
quail_int_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
filter(row_number()==1 | row_number()==n())
quail_int_profile %>%
filter(loglike > max(loglike) - 0.8211872) %>%
filter(row_number()==1 | row_number()==n())
quail_int_profile %>%
filter(loglike > max(loglike) - 0.8211872) %>%
filter(row_number()==1 | row_number()==n())
quail_int_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
filter(row_number()==1 | row_number()==n())
#eyeball parameters
summary(quail_glm)
#grid sampling second attempt
grid_samp2 <- crossing(intercept = -0.01,
slope = seq(0.1,0.6,0.01),
sd = seq(1,2, 0.01)) %>%
rowwise() %>%
mutate(loglike = likelihood_fun(slope, intercept, sd)) %>%
ungroup()
head(grid_samp2)
#the ML estimates are
grid_samp2 %>% filter(loglike == max(loglike))
quail_sd_profile <- grid_samp2 %>%
group_by(sd) %>%
filter(loglike == max(loglike)) %>%
ungroup()
qplot(sd, loglike, data=quail_sd_profile, geom = "line")
quail_sd_profile <- grid_samp2 %>%
group_by(sd) %>%
filter(loglike == max(loglike)) %>%
ungroup()
qplot(sd, loglike, data=quail_sd_profile, geom = "line")
quail_sd_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
filter(row_number()==1 | row_number()==n())
quail_sd_profile %>%
filter(loglike > max(loglike) - 0.8211872) %>%
filter(row_number()==1 | row_number()==n())
quail_sd_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
filter(row_number()==1 | row_number()==n())
quail_slope_profile <- grid_samp2 %>%
group_by(slope) %>%
filter(loglike == max(loglike)) %>%
ungroup()
quail_slope_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
filter(row_number()==1 | row_number()==n())
ggplot(data = slope_prof,        mapping = aes(x = slope, y = logLike))+   geom_line()+   geom_vline(data = morph_80,              mapping = aes(xintercept = slope, color = "orange"))+   geom_vline(data = morph_95,              mapping = aes(xintercept = slope, color = "blue"))
quail_sd_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
filter(row_number()==1 | row_number()==n())
quail_sd_profile %>%
filter(loglike > max(loglike) - 0.8211872) %>%
filter(row_number()==1 | row_number()==n())
quail_slope_profile %>%
filter(loglike > max(loglike) - 0.8211872) %>%
filter(row_number()==1 | row_number()==n())
quail_slope_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
filter(row_number()==1 | row_number()==n())
morph_95
grid_samp2 %>%
filter(loglike > max(loglike) - 1.920729) %>%
filter(row_number()==1|row_number()==n())
grid_samp2 %>%
filter(loglike > max(loglike) - 1.920729) %>%
arrange(slope) %>%
filter(row_number()==1|row_number()==n())
grid_samp2 %>%
filter(loglike > max(loglike)- (qchisq(0.95,1)/2)) %>%
arrange(slope)%>%
filter(row_number()==1|row_number()==n())%>%
as.data.frame
#grid sampling second attempt
grid_samp2 <- crossing(intercept = seq(-0.05,0,0.01)
slope = seq(0.1,0.6,0.01),
#grid sampling second attempt
grid_samp2 <- crossing(intercept = seq(-0.05,0,0.01),
slope = seq(0.1,0.6,0.01),
sd = seq(1,2, 0.01)) %>%
rowwise() %>%
mutate(loglike = likelihood_fun(slope, intercept, sd)) %>%
ungroup()
#grid sampling second attempt
grid_samp2 <- crossing(intercept = seq(-0.05,0.05,0.01),
slope = seq(0.1,0.6,0.01),
sd = seq(1,2, 0.01)) %>%
rowwise() %>%
mutate(loglike = likelihood_fun(slope, intercept, sd)) %>%
ungroup()
head(grid_samp2)
#the ML estimates are
grid_samp2 %>% filter(loglike == max(loglike))
quail_sd_profile <- grid_samp2 %>%
group_by(sd) %>%
filter(loglike == max(loglike)) %>%
ungroup()
qplot(sd, loglike, data=quail_sd_profile, geom = "line")
slope_prof <-
quail_slope_profile <- grid_samp2 %>%
group_by(slope) %>%
filter(loglike == max(loglike)) %>%
ungroup()
qplot(slope, loglike, data=quail_slope_profile, geom = "line")
quail_int_profile <- grid_samp2 %>%
group_by(intercept) %>%
filter(loglike == max(loglike)) %>%
ungroup()
qplot(intercept, loglike, data=quail_int_profile, geom = "line")
grid_samp2 %>%
filter(loglike > max(loglike) - 1.920729) %>%
arrange(slope) %>%
filter(row_number()==1|row_number()==n())
grid_samp2 %>%
filter(loglike > max(loglike)- (qchisq(0.95,1)/2)) %>%
arrange(slope)%>%
filter(row_number()==1|row_number()==n())%>%
as.data.frame
#eyeball parameters
summary(quail_glm)
#grid sampling second attempt
grid_samp2 <- crossing(intercept = seq(-0.05,0.05,0.01),
slope = seq(0.1,0.6,0.01),
sd = seq(0,2, 0.01)) %>%
rowwise() %>%
mutate(loglike = likelihood_fun(slope, intercept, sd)) %>%
ungroup()
#the ML estimates are
grid_samp2 %>% filter(loglike == max(loglike))
head(grid_samp2)
#grid sampling second attempt
grid_samp2 <- crossing(intercept = seq(-0.05,0.05,0.01),
slope = seq(0.1,0.6,0.01),
sd = seq(1,2, 0.01)) %>%
rowwise() %>%
mutate(loglike = likelihood_fun(slope, intercept, sd)) %>%
ungroup()
#the ML estimates are
grid_samp2 %>% filter(loglike == max(loglike))
quail_sd_profile <- grid_samp2 %>%
group_by(sd) %>%
filter(loglike == max(loglike)) %>%
ungroup()
qplot(sd, loglike, data=quail_sd_profile, geom = "line")
quail_slope_profile <- grid_samp2 %>%
group_by(slope) %>%
filter(loglike == max(loglike)) %>%
ungroup()
qplot(slope, loglike, data=quail_slope_profile, geom = "line")
quail_sd_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
filter(row_number()==1 | row_number()==n())
grid_samp2 %>%
filter(loglike > max(loglike) - 1.920729) %>%
arrange(slope) %>%
filter(row_number()==1|row_number()==n())
grid_samp2 %>%
filter(loglike > max(loglike) - 1.920729) %>%
arrange(sd) %>%
filter(row_number()==1|row_number()==n())
quail_slope_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
filter(row_number()==1 | row_number()==n())
quail_slope_profile %>%
filter(loglike > max(loglike) - 0.8211872) %>%
filter(row_number()==1 | row_number()==n())
#plot with CIs
head(quail_slope_profile)
#plot with CIs
colnames(quail_slope_profile)
quail_slope_profile
grid_samp2 %>%
group_by(sd) %>%
filter(loglike == max(loglike)) %>%
ungroup()
qplot(slope, loglike, data=slope_test, geom = "line")
###############
slope_test <- grid_samp2 %>%
group_by(sd) %>%
filter(loglike == max(loglike)) %>%
ungroup()
qplot(slope, loglike, data=slope_test, geom = "line")
slope_test
quail_slope_profile %>%
filter(loglike > max(loglike) - 1.920729)
quail_slope_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
filter(row_number()==1 | row_number()==n())
morph_95 <- grid_morph %>%
filter(logLike > max(logLike)- (qchisq(0.95,1)/2)) %>%
arrange(slope)%>%
filter(row_number()==1|row_number()==n())%>%
as.data.frame
morph_95
ggplot(data = slope_prof,        mapping = aes(x = slope, y = logLike))+
geom_line()+
geom_vline(data = morph_80, aes(xintercept = slope, color = "orange"))+
geom_vline(data = morph_95, aes(xintercept = slope, color = "blue"))
morph_80 <- grid_morph %>%   filter(logLike > max(logLike)- (qchisq(0.80,1)/2)) %>%   arrange(slope)%>%   filter(row_number()==1|row_number()==n())%>%   as.data.frame
ggplot(data = slope_prof,        mapping = aes(x = slope, y = logLike))+
geom_line()+
geom_vline(data = morph_80, aes(xintercept = slope, color = "orange"))+
geom_vline(data = morph_95, aes(xintercept = slope, color = "blue"))
morph_fix <- quail %>%   na.omit()
likeFun <- function(slope, intercept, resid_sd){
fit <- intercept + slope * morph_fix$Tarsus..mm.
#Likelihood
sum(dnorm(morph_fix$Culmen..mm., fit, resid_sd, log=TRUE))
}
# Combinations
grid_morph <- crossing(intercept = seq(-.75, 0.5, 0.5),
slope = seq(0, 0.5,.001),
resid_sd = seq(0.5, 1.5, 0.01)) %>%
rowwise() %>%
mutate(logLike = likeFun(slope, intercept, resid_sd)) %>%
ungroup()
slope_prof <-grid_morph %>%
group_by(slope) %>%
filter(logLike == max(logLike))
#plot
ggplot(data = slope_prof, mapping = aes(x = slope, y = logLike))+   geom_line()
morph_95 <- grid_morph %>%
filter(logLike > max(logLike)- (qchisq(0.95,1)/2)) %>%
arrange(slope)%>%
filter(row_number()==1|row_number()==n())%>%
as.data.frame
morph_80 <- grid_morph %>%   filter(logLike > max(logLike)- (qchisq(0.80,1)/2)) %>%   arrange(slope)%>%   filter(row_number()==1|row_number()==n())%>%   as.data.frame
ggplot(data = slope_prof,        mapping = aes(x = slope, y = logLike))+
geom_line()+
geom_vline(data = morph_80, aes(xintercept = slope, color = "orange"))+
geom_vline(data = morph_95, aes(xintercept = slope, color = "blue"))
morph_80 <- grid_morph %>%   filter(logLike > max(logLike)- (qchisq(0.80,1)/2)) %>%   arrange(slope)%>%   filter(row_number()==1|row_number()==n())%>%   as.data.frame
morph_80
morph_95
ggplot(quail_slope_profile, aes(x = slope, y = loglike)) +
geom_line() +
geom_vline(yintercept=0.37, lty=2)
ggplot(quail_slope_profile, aes(x = slope, y = loglike)) +
geom_line() +
geom_vline(xintercept=0.37, lty=2)
#plotted SD since I could get those...
colnames(quail_sd_profile)
ggplot(quail_sd_profile, aes(x = sd, y = loglike)) +
geom_line() +
geom_vline(xintercept=c(1.18, 1.30), lty=2)
ggplot(quail_sd_profile, aes(x = sd, y = loglike)) +
geom_line() +
geom_vline(xintercept=c(1.18, 1.30), lty=2) +
geom_vline(xintercept=c(1.20, 1.27), color = "red"))
ggplot(quail_sd_profile, aes(x = sd, y = loglike)) +
geom_line() +
geom_vline(xintercept=c(1.18, 1.30), lty=2) +
geom_vline(xintercept=c(1.20, 1.27), color = "red")
ggplot(data = slope_prof, aes(x = slope, y = logLike))+
geom_line()+
geom_vline(data = morph_80, aes(xintercept = slope, color = "orange"))+
geom_vline(data = morph_95, aes(xintercept = slope, color = "blue"))
geom_vline(xintercept=c(1.20, 1.27), color = "80% CI")
geom_vline(xintercept=c(1.20, 1.27), color = "80% CI")
geom_vline(aes(xintercept=c(1.18, 1.30), lty=2, show_guide=TRUE) +
ggplot(quail_sd_profile, aes(x = sd, y = loglike)) +
geom_line() +
geom_vline(aes(xintercept=c(1.18, 1.30), lty=2, show_guide=TRUE)) +
geom_vline(xintercept=c(1.20, 1.27), color = "red", show_guide=TRUE))
ggplot(quail_sd_profile, aes(x = sd, y = loglike)) +
geom_line() +
geom_vline(xintercept=c(1.18, 1.30), lty=2, show_guide=TRUE) +
geom_vline(xintercept=c(1.20, 1.27), color = "red", show_guide=TRUE)
ggplot(quail_sd_profile, aes(x = sd, y = loglike)) +
geom_line() +
geom_vline(xintercept=c(1.18, 1.30), lty=2, show.legend=TRUE) +
geom_vline(xintercept=c(1.20, 1.27), color = "red", show.legend=TRUE)
#################################Below is correct?###########################
#profileModel
prof <- profileModel(quail_glm,
objective = "ordinaryDeviance")
plot(prof, print.grid.points = TRUE)
#with CIs
prof <- profileModel(quail_glm,
objective = "ordinaryDeviance",
quantile = qchisq(0.80, 0.95))
plot(prof, print.grid.points = TRUE)
quail_int_profile <- grid_samp2 %>%
group_by(intercept) %>%
filter(loglike == max(loglike)) %>%
ungroup()
qplot(intercept, loglike, data=quail_int_profile, geom = "line")
quail_int_profile  %>%
group_by(slope) %>%
filter(loglike == max(loglike)) %>%
ungroup()
quail_int_profile  %>%
group_by(intercept) %>%
filter(loglike == max(loglike)) %>%
ungroup()
quail_int_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
filter(row_number()==1 | row_number()==n())
quail_int_profile %>%
filter(loglike > max(loglike) - 0.8211872) %>%
filter(row_number()==1 | row_number()==n())
#with CIs - I didn't successfully get slope CI's...so hard to know if they match :( These look pretty though!
prof <- profileModel(quail_glm,
objective = "ordinaryDeviance",
quantile = qchisq(0.80, 0.95))
plot(prof, print.grid.points = TRUE)
plot(prof, print.grid.points = TRUE)
#profileModel - looks like the max is right around 0.37 for slope
prof <- profileModel(quail_glm,
objective = "ordinaryDeviance")
plot(prof, print.grid.points = TRUE)
#with CIs - I didn't successfully get slope CI's...so hard to know if they match :( These look pretty though!
prof2 <- profileModel(quail_glm,
objective = "ordinaryDeviance",
quantile = qchisq(0.80, 0.95))
plot(prof2, print.grid.points = TRUE)
qplot(intercept, loglike, data=quail_int_profile, geom = "line")
quail_int_profile <- grid_samp2 %>%
group_by(intercept) %>%
filter(loglike == max(loglike)) %>%
ungroup()
quail_int_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
filter(row_number()==1 | row_number()==n())
#likelihood fit
#coefficients
summary(quail_glm)
#likelihood CIs
confint(quail_glm)
#t-tests of parameters
summary(quail_mod)
#coefficients
summary(quail_bayes, digits=5)
0.97222 * (0.0001/0.0271)
quail_sd_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
arrange(slope)
quail_slope_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
arrange(slope)
quail_slope_profile <- grid_samp2 %>%
group_by(slope) %>%
filter(loglike == max(loglike))
quail_slope_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
arrange(slope)
quail_slope_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
arrange(slope)
#profiles
quail_slope_profile <- grid_samp2 %>%
group_by(slope) %>%
filter(loglike == max(loglike)) %>%
ungroup()
filter(row_number()==1 | row_number()==n())
quail_slope_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
arrange(slope)
quail_slope_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
filter(row_number()==1 | row_number()==n())
plot(prof2, print.grid.points = TRUE)
quail_slope_profile %>%
filter(loglike > max(loglike) - 0.8211872) %>%
filter(row_number()==1 | row_number()==n())
quail_slope_profile %>%
filter(loglike > max(loglike) - 1.920729) %>%
filter(row_number()==1 | row_number()==n())
quail_sd_profile %>%
filter(loglike > max(loglike) - 0.8211872) %>%
filter(row_number()==1 | row_number()==n())
#Choosing to vary slope, intercept and residual variance
seal_df <- data.frame(slope = 0.00237),
#Choosing to vary slope, intercept and residual variance
seal_df <- data.frame(slope = 0.00237,
sigma = 5.6805) %>%
crossing(intercept = c(105, 110, 115, 120, 125)) %>%
crossing(resid = c(2,3,4,5,6))
seal_df
#Choosing to vary slope, intercept and residual variance
seal_df <- data.frame(slope = 0.00237,
sigma = 5.6805) %>%
crossing(intercept = c(105, 110, 115, 120, 125)) %>%
crossing(resid = c(2,3,4,5,6)) %>%
crossing(samp_size = c(5:15))
seal_df
#Choosing to vary slope, intercept and residual variance
seal_df <- data.frame(slope = 0.00237) %>%
crossing(intercept = c(105, 110, 115, 120, 125)) %>%
crossing(resid = c(2,3,4,5,6)) %>%
crossing(samp_size = c(5:15))
seal_df
#replicate and add 200 simulations
seal_df <- seal_df %>%
group_by(slope, intercept, resid, samp_size) %>%
expand(reps = 1:samp_size) %>%
ungroup() %>%
crossing(sim= 1:200)
seal_df
#simulate age
seal_df <- seal_df %>%
mutate(age = runif(n(), 958, 8353))
#predict length using y = mx + b
seal_df <- seal_df %>%
mutate(length = rnorm(n(), slope*age + intercept, resid))
seal_df
#check to see if data looks ok; not so much...
ggplot(seal_df, aes(x = age, y = length)) +
geom_point()
library(purrr)
#fit linear model
seal_df_fit <- seal_df %>%
group_by(slope, intercept, sigma, n, sim, alpha) %>%
nest() %>%
mutate(mod = map(data, ~lm(length.cm ~ age.days, data = seal_data_sim)))
#fit linear model
colnames(seal_df)
seal_df_fit <- seal_df %>%
group_by(slope, intercept, resid, samp_size, sim) %>%
nest() %>%
mutate(mod = map(data, ~lm(length.cm ~ age.days, data = seal_data_sim)))
seal_df_fit <- seal_df %>%
group_by(slope, intercept, resid, samp_size, sim) %>%
nest() %>%
mutate(mod = map(data, ~lm(length.cm ~ age.days, data = seal_df)))
seal_df_fit <- seal_df %>%
group_by(slope, intercept, resid, samp_size, sim) %>%
nest() %>%
mutate(mod = map(data, ~lm(length ~ age, data = seal_df)))
#Choosing to vary slope, intercept and residual variance
seal_df <- data.frame(slope = 0.00237) %>%
crossing(intercept = c(110, 115, 120)) %>%
crossing(resid = c(3,4,5,6,7)) %>%
crossing(samp_size = c(5:15))
#replicate and add 100 simulations
seal_df <- seal_df %>%
group_by(slope, intercept, resid, samp_size) %>%
expand(reps = 1:samp_size) %>%
ungroup() %>%
crossing(sim= 1:100)
#replicate and add 100 simulations
seal_df <- seal_df %>%
group_by(slope, intercept, resid, samp_size) %>%
expand(reps = 1:samp_size) %>%
crossing(sim= 1:100)
#replicate and add 100 simulations
seal_df <- seal_df %>%
group_by(slope, intercept, resid, samp_size) %>%
expand(reps = 1:samp_size) %>%
ungroup()
#Choosing to vary slope, intercept and residual variance
seal_df <- data.frame(slope = 0.00237) %>%
crossing(intercept = c(110, 115, 120)) %>%
crossing(resid = c(3,4,5,6,7)) %>%
crossing(samp_size = c(5:15))
#replicate and add 100 simulations
seal_df <- seal_df %>%
group_by(slope, intercept, resid, samp_size) %>%
expand(reps = 1:samp_size) %>%
ungroup() %>%
crossing(sim= 1:100)
#simulate age
seal_df <- seal_df %>%
mutate(age = runif(n(), 958, 8353))
#predict length using y = mx + b
seal_df <- seal_df %>%
mutate(length = rnorm(n(), slope*age + intercept, resid))
head(seal_df)
seal_df_fit <- seal_df %>%
group_by(slope, intercept, resid, samp_size, sim) %>%
mutate(mod = map(data, ~lm(length ~ age, data = seal_df)))
seal_df_fit <- seal_df %>%
group_by(slope, intercept, resid, samp_size, sim) %>%
nest() %>%
mutate(mod = map(data, ~lm(length ~ age, data = seal_df)))
seal_df_fit <- seal_df %>%
group_by(slope, intercept, resid, samp_size, sim) %>%
nest() %>%
mutate(mod = map(data, ~lm(length ~ age, data = seal_df))) %>%
unnest() %>%
ungroup()
