objective = "ordinaryDeviance")
plot(pufferfish_prof_mod)
plot(pufferfish_prof_mod, print.grid.points = TRUE)
#profiles with CI
pufferfish_prof_mod <- profileModel(pufferfish_glm,
objective = "ordinaryDeviance",
quantile = qchisq(0.95, 1))
plot(pufferfish_prof_mod, print.grid.points = TRUE)
summary(puffer_glm) %>% tidy()
library(broom)
summary(puffer_glm) %>% tidy()
tidy(puffer_glm)
tidy(lm(predators ~ resemblance, data = pufferfish))
tidy(puffer_glm)
tidy(lm(predators ~ resemblance, data = pufferfish))
confint(puffer_glm)
confint(puffer_glm)
confint(pufferfish_glm)
?confint
library(bbmle)
install.packages("bbmle")
library(bbmle)
#compare glm and lm...same!
tidy(pufferfish_glm)
tidy(lm(predators ~ resemblance, data = pufferfish))
library(bbmle)
?mle2
min_lik_fun <- function(slope, intercept, resid_sd) -1*lik_fun(slope, intercept, resid_sd)
puffer_mle2 <- mle2(min_lik_fun,
start = list(slope = 1.9, intercept = 1, resid_sd = 3))
puffer_mle2
summary(puffer_mle2)
summary(pufferfish_glm)
neg_likelihood_fun <- function(slope, intercept, sd_res)
{
likelihood_fun(slope, intercept, sd_res) * -1
}
#Find MLE
pufferfish_grid %>% filter(log_like == max(log_like))
#fit model
pufferfish_mle2 <- mle2(neg_likelihood_fun, start = c(slope = 1.6,
intercept = 1.1,
sd_res = 2.3))
#fit model
pufferfish_mle2 <- mle2(neg_likelihood_fun, start = list(slope = 1.6,
intercept = 1.1,
sd_res = 2.3))
neg_likelihood_fun <- function(slope, intercept, sd_res)
{
likelihood_fun(slope, intercept, sd_res) * -1
}
#fit model
pufferfish_mle2 <- mle2(neg_likelihood_fun, start = list(slope = 1.6,
intercept = 1.1,
sd_res = 2.3))
#change function for negative log_like
neg_likelihood_fun <- function(slope, intercept, sd_res) likelihood_fun(slope, intercept, sd_res) * -1
#fit model
pufferfish_mle2 <- mle2(neg_likelihood_fun, start = list(slope = 1.6,
intercept = 1.1,
sd_res = 2.3))
neg_likelihood_fun <- function(slope, intercept, sd_res)
{
likelihood_fun(slope, intercept, sd_res) * -1
}
#fit model
pufferfish_mle2 <- mle2(neg_likelihood_fun, start = list(slope = 1.9,
intercept = 1,
sd_res = 3))
min_lik_fun <- function(slope, intercept, resid_sd) -1*lik_fun(slope, intercept, resid_sd)
puffer_mle2 <- mle2(min_lik_fun,
start = list(slope = 1.9, intercept = 1, resid_sd = 3))
summary(puffer_mle2)
#change function for negative log_like
neg_likelihood_fun <- function(slope, intercept, sd_res) -1*lik_fun(slope, intercept, sd_res)
#fit model
pufferfish_mle2 <- mle2(neg_likelihood_fun, start = list(slope = 1.6, intercept = 1.1, sd_res = 2.4))
#output
summary(puffer_mle2)
#profile
pufferfish_mle2_prof <- profileModel(pufferfish_mle2,
objective = "ordinaryDeviance",
quantile = qchisq(0.95, 1))
#output
summary(puffer_mle2)
#profile
pufferfish_mle2_prof <- profileModel(pufferfish_mle2,
objective = "ordinaryDeviance",
quantile = qchisq(0.95, 1))
plot(profile(puffer_mle2))
pufferfish_mle2_prof <- plot(profile(pufferfish_mle2))
plot(profile(pufferfish_prof_mod))
plot(profile(pufferfish_glm))
pufferfish_mle2_test <- mle2(neg_likelihood_fun, start = list(slope = 33, intercept = 50, sd_res = 13))
mle2(min_lik_fun,
start = list(slope = 100, intercept = -100, resid_sd = 0.1))
pufferfish_mle2_test <- mle2(neg_likelihood_fun, start = list(slope = 2, intercept = 50, sd_res = 13))
pufferfish_mle2_test <- mle2(neg_likelihood_fun, start = list(slope = 33, intercept = 2, sd_res = 13))
pufferfish_mle2_test <- mle2(neg_likelihood_fun, start = list(slope = 33, intercept = 50, sd_res = 2))
pufferfish_mle2_sann <- mle2(neg_likelihood_fun, start = list(slope = 1.6, intercept = 1.1, sd_res = 2.4),
method = "SANN")
pufferfish_mle2_sann
summary(pufferfish_mle2_sann)
#Output
pufferfish_mle2_sann
#plots
plot(profile(pufferfish_mle2_sann))
puffer_sann <- mle2(min_lik_fun,
start = list(slope = 1.9, intercept = 1, resid_sd = 3),
method = "SANN")
summary(puffer_sann)
plot(profile(puffer_sann))
profileModel(pufferfish_mle2_sann, objective = "ordinaryDeviance",
quantile = qchisq(0.95, 1))
#plots
plot(profile(pufferfish_mle2_sann)) #does not work
1e-10
?optim
puffer_bfgs <- mle2(min_lik_fun,
start = list(slope = 1.9, intercept = 1, resid_sd = 3),
method = "L-BFGS-B",
lower=c(resid_sd = 1e-10))
plot(profile(puffer_bfgs))
summary(puffer_bfgs)
pufferfish_mle2_lbfgsb <- mle2(neg_likelihood_fun, start = list(slope = 1.6, intercept = 1.1, sd_res = 2.4),
method = "L-BFGS-B",
lower=c(resid_sd = 0))
summary(puffer_bfgs)
summary(pufferfish_mle2_lbfgsb)
pufferfish_mle2_lbfgsb
tidy(summary(pufferfish_mle2_lbfgsb))
summary(pufferfish_mle2_lbfgsb) %>% tidy()
plot(profile(puffer_bfgs))
#but this one works...why??
pufferfish_mle2_prof <- plot(profile(pufferfish_mle2))
plot(pufferfish_prof_mod, print.grid.points = TRUE)
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, z = log_like)) +
geom_contour(aes(color = ..level..), size = 6) +
theme_minimal()+
scale_color_gradientn(colors = beyonce_palette(120, type = "continuous"))
#zoomed in
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, z = log_like)) +
geom_contour(aes(color = ..level..), size = 6) +
theme_minimal() +
xlim(1, 1.5) + ylim(1.5, 2.5)+
scale_color_gradientn(colors = beyonce_palette(120, type = "continuous"))
#LM
summary(lm(predators ~ resemblance, data = pufferfish))
lm(predators ~ resemblance, data = pufferfish)
#zoomed in
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, z = log_like)) +
geom_contour(aes(color = ..level..), size = 6) +
theme_minimal() +
xlim(.5, 1.5) + ylim(0.5, 2.5)+
scale_color_gradientn(colors = beyonce_palette(120, type = "continuous"))
#add log likelihood function
pufferfish_grid <- crossing(slope = seq(0.5, 4.5, 0.05),
intercept = seq(0.5,3, 0.05),
sd_res = seq(2,4, 0.05)) %>%
rowwise()%>%
mutate(log_like = likelihood_fun(slope, intercept, sd_res))%>%
ungroup()
#Find MLE
pufferfish_grid %>% filter(log_like == max(log_like))
#increase grid size (~100k)
pufferfish_grid <- crossing(slope = seq(1.5, 4.5, 0.05),
intercept = seq(1,3, 0.05),
sd_res = seq(2,4, 0.05))
#add log likelihood function
pufferfish_grid <- crossing(slope = seq(1.5, 4.5, 0.05),
intercept = seq(1,3, 0.05),
sd_res = seq(2,4, 0.05)) %>%
rowwise()%>%
mutate(log_like = likelihood_fun(slope, intercept, sd_res))%>%
ungroup()
#add log likelihood function
pufferfish_grid <- crossing(slope = seq(1.5, 4.5, 0.05),
intercept = seq(1,3, 0.05),
sd_res = seq(2,4, 0.05)) %>%
rowwise()%>%
mutate(log_like = likelihood_fun(slope, intercept, sd_res))%>%
ungroup()
#Find MLE
pufferfish_grid %>% filter(log_like == max(log_like))
#CI
confint(pufferfish_glm)
#confused as to the uses of the previous profileModel vs this plot(profile())...
plot(profile(pufferfish_glm))
#compare glm and lm...same!
tidy(pufferfish_glm)
tidy(lm(predators ~ resemblance, data = pufferfish))
#CI
confint(pufferfish_glm)
#GLM
pufferfish_glm <- glm(predators ~ resemblance,
family = gaussian(link = "identity"),
data = pufferfish)
#profiles with CI
pufferfish_prof_mod <- profileModel(pufferfish_glm,
objective = "ordinaryDeviance",
quantile = qchisq(0.95, 1))
plot(pufferfish_prof_mod, print.grid.points = TRUE)
library(profileModel)
library(broom)
#GLM
pufferfish_glm <- glm(predators ~ resemblance,
family = gaussian(link = "identity"),
data = pufferfish)
#profiles with CI
pufferfish_prof_mod <- profileModel(pufferfish_glm,
objective = "ordinaryDeviance",
quantile = qchisq(0.95, 1))
plot(pufferfish_prof_mod, print.grid.points = TRUE)
pufferfish_glm
plot(pufferfish_prof_mod, print.grid.points = TRUE)
#confused as to the uses of the previous profileModel vs this plot(profile())...
plot(profile(pufferfish_glm))
#compare glm and lm...same!
tidy(pufferfish_glm)
tidy(lm(predators ~ resemblance, data = pufferfish))
#CI
confint(pufferfish_glm)
#change function for negative log_like
neg_likelihood_fun <- function(slope, intercept, sd_res) -1*likelihood_fun(slope, intercept, sd_res)
#fit model
pufferfish_mle2 <- mle2(neg_likelihood_fun, start = list(slope = 1.6, intercept = 1.1, sd_res = 2.4))
likelihood_fun <- function(slope, intercept, sd_res)
{
#y = mx+b
lin_mod <- slope*pufferfish$resemblance + intercept
#sum because multiple observations
sum(dnorm(pufferfish$predators, mean = lin_mod, sd = sd_res, log = TRUE))
}
#LM
summary(lm(predators ~ resemblance, data = pufferfish))
pufferfish_grid <- crossing(slope = seq(1.5, 4.5, 0.1),
intercept = seq(1,3, 0.1),
sd_res = seq(2,4, 0.1))
#increase grid size (~100k)
pufferfish_grid <- crossing(slope = seq(1.5, 4.5, 0.05),
intercept = seq(1,3, 0.05),
sd_res = seq(2,4, 0.05))
#add log likelihood function
pufferfish_grid <- crossing(slope = seq(1.5, 4.5, 0.05),
intercept = seq(1,3, 0.05),
sd_res = seq(2,4, 0.05)) %>%
rowwise()%>%
mutate(log_like = likelihood_fun(slope, intercept, sd_res))%>%
ungroup()
#Find MLE
pufferfish_grid %>% filter(log_like == max(log_like))
#Filter to SD MLE
pufferfish_grid_filter <- pufferfish_grid %>% filter(sd_res == 2.9)
pufferfish_grid_filter
#tried a few
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, fill = log_like)) +
geom_raster() +
theme_minimal() +
scale_fill_gradientn(colors = beyonce_palette(120, type = "continuous"))
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, z = log_like)) +
geom_contour(aes(color = ..level..), size = 6) +
theme_minimal()+
scale_color_gradientn(colors = beyonce_palette(120, type = "continuous"))
#zoomed in
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, z = log_like)) +
geom_contour(aes(color = ..level..), size = 6) +
theme_minimal() +
xlim(1, 1.5) + ylim(1.5, 2.5)+
scale_color_gradientn(colors = beyonce_palette(120, type = "continuous"))
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, z = log_like)) +
geom_contour(aes(color = ..level..), size = 6) +
theme_minimal()+
scale_color_gradientn(colors = beyonce_palette(120, type = "continuous"))
#zoomed in
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, z = log_like)) +
geom_contour(aes(color = ..level..), size = 6) +
theme_minimal() +
xlim(1.5, 2.5) + ylim(2.5, 4)+
scale_color_gradientn(colors = beyonce_palette(120, type = "continuous"))
#zoomed in
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, z = log_like)) +
geom_contour(aes(color = ..level..), size = 6) +
theme_minimal() +
xlim(1.5, 2.5) + ylim(2.5, 3.5)+
scale_color_gradientn(colors = beyonce_palette(120, type = "continuous"))
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, z = log_like)) +
geom_contour(aes(color = ..level..))
#zoomed out
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, z = log_like)) +
geom_contour(aes(color = ..level..), size = 6) +
theme_minimal() +
xlim(0, 4) + ylim(0, 4)+
scale_color_gradientn(colors = beyonce_palette(120, type = "continuous"))
#zoomed in
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, z = log_like)) +
geom_contour(aes(color = ..level..), size = 6) +
theme_minimal() +
xlim(1.5, 2.5) + ylim(2.5, 3.5)+
scale_color_gradientn(colors = beyonce_palette(120, type = "continuous"))
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, z = log_like)) +
geom_contour(aes(color = ..level..), size = 6) +
theme_minimal()+
scale_color_gradientn(colors = beyonce_palette(120, type = "continuous"))
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, z = log_like)) +
geom_contour(aes(color = ..level..), size = 6) +
theme_minimal()+
scale_color_gradientn(colors = beyonce_palette(120, type = "continuous"))
#tried a few
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, fill = log_like)) +
geom_raster() +
theme_minimal() +
scale_fill_gradientn(colors = beyonce_palette(120, type = "continuous"))
#zoomed in
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, z = log_like)) +
geom_contour(aes(color = ..level..), size = 6) +
theme_minimal() +
xlim(1.5, 2.5) + ylim(2.5, 3.5)+
scale_color_gradientn(colors = beyonce_palette(120, type = "continuous"))
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, z = log_like)) +
geom_contour(aes(color = ..level..), size = 6) +
theme_minimal()+
scale_color_gradientn(colors = beyonce_palette(120, type = "continuous"))
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, fill = log_like)) +
geom_raster() +
theme_minimal() +
scale_fill_gradientn(colors = beyonce_palette(120, type = "continuous"))
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, fill = log_like)) +
geom_raster() +
theme_minimal() +
scale_fill_gradientn(colors = beyonce_palette(120, type = "continuous"))+
xlim(1.5, 2.5) + ylim(2.5, 3.5)
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, fill = log_like)) +
geom_raster() +
theme_minimal() +
scale_fill_gradientn(colors = beyonce_palette(120, type = "continuous"))+
geom_abline(slope = 3, intercept = 1.9)
?geom_abline
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, fill = log_like)) +
geom_raster() +
theme_minimal() +
scale_fill_gradientn(colors = beyonce_palette(120, type = "continuous"))+
geom_abline(intercept = 1.9)
ggplot(pufferfish_grid_filter, aes(x = slope, y = intercept, fill = log_like)) +
geom_raster() +
theme_minimal() +
scale_fill_gradientn(colors = beyonce_palette(120, type = "continuous"))+
geom_abline(intercept = 1.9)
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, fill = log_like)) +
geom_raster() +
theme_minimal() +
scale_fill_gradientn(colors = beyonce_palette(120, type = "continuous"))+
geom_line()
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, fill = log_like)) +
geom_raster() +
theme_minimal() +
scale_fill_gradientn(colors = beyonce_palette(120, type = "continuous"))+
geom_contour()
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, fill = log_like)) +
geom_raster() +
theme_minimal() +
scale_fill_gradientn(colors = beyonce_palette(120, type = "continuous"))+
geom_contour(aes(x = intercept, y = slope, z = log_like))
#having fun
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, fill = log_like)) +
geom_raster() +
theme_minimal() +
scale_fill_gradientn(colors = beyonce_palette(120, type = "continuous"))+
geom_contour(aes(x = intercept, y = slope, z = log_like), size = 2)
#having fun
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, fill = log_like)) +
geom_raster() +
theme_minimal() +
scale_fill_gradientn(colors = beyonce_palette(120, type = "continuous"))+
geom_contour(aes(x = intercept, y = slope, z = log_like), size = 1.25)
#having fun
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, fill = log_like)) +
geom_raster() +
theme_minimal() +
scale_fill_gradientn(colors = beyonce_palette(120, type = "continuous"))+
geom_contour(aes(x = intercept, y = slope, z = log_like), size = 1)
#having fun
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, fill = log_like)) +
geom_raster() +
theme_minimal() +
scale_fill_gradientn(colors = beyonce_palette(120, type = "continuous"))+
geom_contour(aes(x = intercept, y = slope, z = log_like), size = 0.5)
#having fun
ggplot(pufferfish_grid_filter, aes(x = intercept, y = slope, fill = log_like)) +
geom_raster() +
theme_minimal() +
scale_fill_gradientn(colors = beyonce_palette(120, type = "continuous"))+
geom_contour(aes(x = intercept, y = slope, z = log_like))
#GLM
pufferfish_glm <- glm(predators ~ resemblance,
family = gaussian(link = "identity"),
data = pufferfish)
pufferfish_glm
#profiles with CI
pufferfish_prof_mod <- profileModel(pufferfish_glm,
objective = "ordinaryDeviance",
quantile = qchisq(0.95, 1))
pufferfish_glm
#profiles with CI
pufferfish_prof_mod <- profileModel(pufferfish_glm,
objective = "ordinaryDeviance",
quantile = qchisq(0.95, 1))
plot(pufferfish_prof_mod, print.grid.points = TRUE)
#confused as to the uses of the previous profileModel vs this plot(profile())...
plot(profile(pufferfish_glm))
#compare glm and lm...same!
tidy(pufferfish_glm)
tidy(lm(predators ~ resemblance, data = pufferfish))
tidy(pufferfish_glm)
#CI
confint(pufferfish_glm)
#change function for negative log_like
neg_likelihood_fun <- function(slope, intercept, sd_res) -1*likelihood_fun(slope, intercept, sd_res)
#fit model
pufferfish_mle2 <- mle2(neg_likelihood_fun, start = list(slope = 1.6, intercept = 1.1, sd_res = 2.4))
#output
summary(puffer_mle2)
#fit model
pufferfish_mle2 <- mle2(neg_likelihood_fun, start = list(slope = 1.6, intercept = 1.1, sd_res = 2.4))
#output
summary(puffer_mle2)
#profile....error of "$operator is invalid for atomic vectors"
pufferfish_mle2_prof <- profileModel(pufferfish_mle2,
objective = "ordinaryDeviance",
quantile = qchisq(0.95, 1))
#but this one works...why??
pufferfish_mle2_prof <- plot(profile(pufferfish_mle2))
mle2(neg_likelihood_fun, start = list(slope = 33, intercept = 50, sd_res = 13))
mle2(neg_likelihood_fun, start = list(slope = 2, intercept = 50, sd_res = 13))
mle2(neg_likelihood_fun, start = list(slope = 2.9, intercept = 50, sd_res = 13))
mle2(neg_likelihood_fun, start = list(slope = 2.9, intercept = 50, sd_res = 13))
mle2(neg_likelihood_fun, start = list(slope = 33, intercept = 1.9, sd_res = 13))
mle2(neg_likelihood_fun, start = list(slope = 33, intercept = 50, sd_res = 2.9))
#SANN
pufferfish_mle2_sann <- mle2(neg_likelihood_fun, start = list(slope = 1.6, intercept = 1.1, sd_res = 2.4),
method = "SANN")
#Output
pufferfish_mle2_sann
pufferfish_mle2_lbfgsb <- mle2(neg_likelihood_fun, start = list(slope = 1.6, intercept = 1.1, sd_res = 2.4),
method = "L-BFGS-B",
lower=c(resid_sd = 0))
pufferfish_mle2_lbfgsb
summary(pufferfish_mle2_lbfgsb)
#plots
plot(profile(pufferfish_mle2_sann)) #does not work
profileModel(pufferfish_mle2_sann, objective = "ordinaryDeviance",
quantile = qchisq(0.95, 1))
#
plot(profile(pufferfish_mle2_lbfgsb))
#output
summary(pufferfish_mle2)
puff_base
#LM
summary(lm(predators ~ resemblance, data = pufferfish)) %>% tidy()
(1/6)*(1/6)
1/36
(1/6)*(5/6)
5/36
1-(1/36)
35/36
(1/6)+(2/6)+(3/6)+(4/6)+(5/6) +1
216*5
216*6
216*6
30+36+30+18+6
30*36*30*18*6
5*125
5*25
32*4
3*27
2*16
125+128+81+32+6
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(readr)
setwd("~/UMB/Biological Stats 607/Midterm/Markdown")
library(tidyr)
knitr::opts_chunk$set(echo = TRUE)
pufferfish <- read_csv("../Data/16q11PufferfishMimicry.csv")
#visualize
puff_base <- ggplot(pufferfish, aes(x = resemblance, y = predators)) +
geom_point()
puff_base
?confint
(1*0.0000000001)/0.027
((1/36)+(35/36)*(0.0001))/0.027
(1/36)+(35/36)
(1*0.0001)/0.027
((35/36) * 0.0001) / (((35/36) * 0.0001) + ((1/36 )*(1 - 0.0001)))
P_SE <- 35/36 #probability that the dice is says it is exploding
P_E <- 0.0001 #probability the sun explodes
#P(T) = P(T/E)*P(E)+P(T/N)*P(N)
P_SN <- 1/36 #probability that the dice is saying the sun exploded but it did not
P_N <- 1-P_E  #probaility of the sun not exploding
P_S <- P_SE*P_E+P_SN*P_N
P_S #marginal
P_ES <- (P_SE * P_E)/P_S
P_ES  #probability the sun explodes given the dice tells you it is exploding
p_H|D <- 2
p_DH <- 35/36 #probability truth about exploding
p_NDH <- 1/36 #probability lie about exploding
p_H <- 0.0001 #probability of nova
p_NH <- 1-0.0001
(p_DH*p_H)/((p_DH*p_H) + (p_NDH*p_NH))
1-0.0001
P_ES
install.packages(c("reprex", "datapasta", "lubridate", "tidyr"))
